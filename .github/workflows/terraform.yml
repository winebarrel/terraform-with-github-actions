name: "Terraform"
on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      sha:
        required: true
        type: string
    secrets:
      access_key_id:
        required: true
      secret_access_key:
        required: true

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.access_key_id }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.secret_access_key }}
  AWS_REGION: ap-northeast-1
  S3_BUCKET: winebarrel-terraform-with-github-actions

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: "2"
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Terraform Format
        id: fmt
        working-directory: ${{ inputs.name }}
        run: terraform fmt -check
      - name: Terraform Init
        id: init
        working-directory: ${{ inputs.name }}
        run: terraform init
      - name: Terraform Validate
        id: validate
        working-directory: ${{ inputs.name }}
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        working-directory: ${{ inputs.name }}
        run: |
          terraform plan -no-color -input=false -out=tfplan-${{ inputs.sha }}
        continue-on-error: true
      - name: Upload plan file to S3
        if: github.event_name == 'pull_request'
        working-directory: ${{ inputs.name }}
        run: aws s3 cp tfplan-${{ inputs.sha }} s3://${{ env.S3_BUCKET }}/plan/${{ inputs.name }}/
      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Download plan file from s3
        id: download_plan
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: ${{ inputs.name }}
        run: |
          PULL_REQUEST_SHA=$(git rev-list -n1 --parents ${{ inputs.sha }} | awk '{print $3}')
          if [[ -n "$PULL_REQUEST_SHA" ]]; then
            echo "sha=$PULL_REQUEST_SHA" >> $GITHUB_OUTPUT
          else
            echo "error: Pull Request SHA not found"
            exit 1
          fi
          aws s3 cp s3://${{ env.S3_BUCKET }}/plan/${{ inputs.name }}/tfplan-${PULL_REQUEST_SHA} ./
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: ${{ inputs.name }}
        run: terraform apply -auto-approve -input=false tfplan-${{ steps.download_plan.outputs.sha }}
