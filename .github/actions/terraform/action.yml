name: "Terraform"
description: "Run terraform"
inputs:
  name:
    description: "project name"
    required: true
  bucket:
    description: "S3 bucket name"
    default: winebarrel-terraform-with-github-actions
    required: false
  region:
    description: "S3 bucket region"
    default: ap-northeast-1
    required: false
runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: "2"
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
    - name: Terraform Format
      id: fmt
      shell: bash
      working-directory: ${{ inputs.name }}
      run: terraform fmt -check
    - name: Terraform Init
      id: init
      shell: bash
      working-directory: ${{ inputs.name }}
      run: terraform init
    - name: Terraform Validate
      id: validate
      shell: bash
      working-directory: ${{ inputs.name }}
      run: terraform validate -no-color
    - name: Terraform Plan
      id: plan
      shell: bash
      if: github.event_name == 'pull_request'
      working-directory: ${{ inputs.name }}
      run: |
        terraform plan -no-color -input=false -out=tfplan-${{ github.event_name == 'push' && github.sha || github.event.pull_request.head.sha }}
      continue-on-error: true
    - name: Upload plan file to S3
      if: github.event_name == 'pull_request'
      shell: bash
      working-directory: ${{ inputs.name }}
      env:
        AWS_REGION: ${{ inputs.region }}
      run: aws s3 cp tfplan-${{ github.event_name == 'push' && github.sha || github.event.pull_request.head.sha }} s3://${{ inputs.bucket }}/plan/${{ inputs.name }}/
    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      shell: bash
      run: exit 1
    - name: Download plan file from s3
      id: download_plan
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      shell: bash
      working-directory: ${{ inputs.name }}
      env:
        AWS_REGION: ${{ inputs.region }}
      run: |
        PULL_REQUEST_SHA=$(git rev-list -n1 --parents ${{ github.event_name == 'push' && github.sha || github.event.pull_request.head.sha }} | awk '{print $3}')
        if [[ -n "$PULL_REQUEST_SHA" ]]; then
          echo "sha=$PULL_REQUEST_SHA" >> $GITHUB_OUTPUT
        else
          echo "error: Pull Request SHA not found"
          exit 1
        fi
        aws s3 cp s3://${{ inputs.bucket }}/plan/${{ inputs.name }}/tfplan-${PULL_REQUEST_SHA} ./
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      shell: bash
      working-directory: ${{ inputs.name }}
      run: terraform apply -auto-approve -input=false tfplan-${{ steps.download_plan.outputs.sha }}
